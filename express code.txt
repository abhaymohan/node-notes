=====> other middlewares

1. bodyparser

const bodyParser = require('body-parser')'
app.use(bodyParser.urlencoded({extended : false}));

// bodyParser.urlencoded() registers a middleware that parses the body not all but body we 
// are getting here like form submission data. 
// this middleware will automatically parse the body of incoming request and will call
// next automatically to let req reach to other middlewares
{
Now this will not parse all kinds of possible bodies, files, json and so on but this will parse bodieslike the one we're getting here, sent through a form. If we have other bodies like files and we'll do that also in this course
we'll use different parsers and this makes expressjs so extensible. If we need something, we can
just plug it in.
}

2. 


=====> using express.js

>> npm install express --save
-> now in js file

const express = require('express')
const app = express()                           
// express returns a function that we have assigned to app;


=====> creating and listening on a port

const express = require('express')
const app = express();

app.listen(portNumber, optionalCallback); 


=====> middleware methods

app.use()               // check only initial match of url
app.get()             // checks for exact match of url with http method type "get" in this case.
app.post()   // checks for exact match of url with http method type that is "post" in this case.


=====> utility methods on res object => app.use(req, res, next)

1. res.send()        // for sending the response
ex :- res.send(<p> hello </p>)                // as in node we do not have to specify the  Content-Type header though we could do that but not necessary if we do add a header by ourself than express will use it else it will add correct header by itself and in this case it will add header of "text/html" automatically.

2. res.redirect('url') // redirect to this url
ex - 
res.redirect('/);
res.redirect('/home');

3. res.status()
to add status code with response.

4. res.setHeader()
to set header by youself.

5. we cal also chain all these methods
res.setHeader().status().send();
ex - res.setHeader('Content-Type', 'text/html').status(404).send('<h1>page not found</h1>')


=====> utility methods on req object => app.use(req, res, next)



=====> handling different routes using express

# FILE1.js
const express = require('express');
const router = express.Router();       // capital R for express.Router()

router.use('/',() => {
    console.log('router middleware');
})

module.exports = router;


# FILE2.js

const express = require('express');
const file1Routes = require('./FILE1');

app.use(file1.routes);


===> serving files statically (lec - 75)
{for serving files statically we have register a middleware}

>> app.use(express.static(path.join(__dirname, 'public')));

{we need to give absolute path to files that need to be served statically
here our files are in public folder so we give path to public folder and all files in public folder will be serves statically}

**{To serve static files such as images, CSS files, and JavaScript files, use the express.static built-in middleware function in Express. only these types of files will be served statically by "express.static()" method}


{Static content is any content that can be delivered to an end user without having to be generated, modified, or processed. The server delivers the same file to each user, making static content one of the simplest and most efficient content types to transmit over the Internet.}

{serving files statically means that these files will be sent to the client and in most cases 
these are css files that are visible on client side.
so for serving files statically we have register a middleware }


